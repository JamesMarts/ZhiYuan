apply plugin: 'com.tencent.bugly.tinker-support'

def debugBakPath = file("${buildDir}/bakApk/")

def releaseBakPath = file('./tinker/bakApk')

def bakPath = project.tinker.buildRelease ? releaseBakPath : debugBakPath

/**
 * 此处填写每次构建生成的基准包目录
 */
def baseApkDir = project.tinker.buildRelease ? project.tinker.baseApkDir : ''

def baseVersionName = project.tinker.versionName

def apkName = getApkName(bakPath, baseApkDir, baseVersionName)

def getApkName(def bakPath, String baseApkDir, String baseVersionName) {
    if (baseApkDir != null && baseApkDir.length() != 0) {

        File file = file("${bakPath.name}/${baseApkDir}")
        if (file.exists()) {
            File[] files = file.listFiles()
            if (files != null && files.length > 0) {
                for (File file1 : files) {
                    if (file1 != null && file1.exists() && file1.isFile()) {
                        String name = file1.name
                        if (name != null && name.endsWith(".apk")) {
                            return name.replace(".apk", "")
                            /* int start = name.indexOf("-") + 1
                             int end = name.indexOf("-", start)
                           def  versionName name.substring(start, end)*/
                        }
                    }
                }
            }
        }
    }
    return "${name}-${baseVersionName}-release"
}
/**
 * 对于插件各参数的详细解析请参考
 */
tinkerSupport {

    // 开启tinker-support插件，默认值true
    enable = project.tinker.buglyTinkerEnable

    // 构建基准包跟补丁包都要修改tinkerId，主要用于区分
    tinkerId = project.tinker.versionName

    // 自动生成tinkerId, 你无须关注tinkerId，默认为false
    autoGenerateTinkerId = false

    // 指定归档目录，默认值当前module的子目录tinker
    autoBackupApkDir = "${bakPath}"

    //指定输出文件前缀
    targetFileNamePrefix = "${apkName}"

    // 是否启用覆盖tinkerPatch配置功能，默认值false,开启后tinkerPatch配置不生效，即无需添加tinkerPatch
    overrideTinkerPatchConfiguration = project.tinker.buglyTinkerEnable

    // 编译补丁包时，必需指定基线版本的apk，默认值为空,如果为空，则表示不是进行补丁包的编译 @{link tinkerPatch.oldApk }
    baseApk = "${bakPath}/${baseApkDir}/${apkName}.apk"

    // 对应tinker插件applyMapping
    baseApkProguardMapping = "${bakPath}/${baseApkDir}/${apkName}-mapping.txt"

    // 对应tinker插件applyResourceMapping
    baseApkResourceMapping = "${bakPath}/${baseApkDir}/${apkName}-R.txt"

    // 打多渠道补丁时指定目录
    //  buildAllFlavorsDir = "${bakPath}/${baseApkDir}"

    // 是否使用加固模式，默认为false
    isProtectedApp = true

    // 是否采用反射Application的方式集成，无须改造Application
    enableProxyApplication = false

    // 支持新增Activity
    supportHotplugComponent = true

}

/**
 * 一般来说,我们无需对下面的参数做任何的修改
 * 对于各参数的详细介绍请参考:
 * https://github.com/Tencent/tinker/wiki/Tinker-%E6%8E%A5%E5%85%A5%E6%8C%87%E5%8D%97
 */
tinkerPatch {
    tinkerEnable = project.tinker.buglyTinkerEnable
    ignoreWarning = false
    useSign = false
    dex {
        dexMode = "jar"
        pattern = ["classes*.dex"]
        loader = []
    }
    lib {
        pattern = ["lib/*/*.so"]
    }

    res {
        pattern = ["res/*", "r/*", "assets/*", "resources.arsc", "AndroidManifest.xml"]
        ignoreChange = []
        largeModSize = 100
    }

    packageConfig {
    }
    sevenZip {
        zipArtifact = "com.tencent.mm:SevenZip:1.1.10"
//        path = "/usr/local/bin/7za"
    }
    buildConfig {
        keepDexApply = false
//      tinkerId = "base-2.0.1"
    }
}
